{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PluginListenerHandle, WebPlugin } from '@capacitor/core';\n\nimport type { CapacitorPluginAdPiePlugin } from './definitions';\n\nexport class CapacitorPluginAdPieWeb\n  extends WebPlugin\n  implements CapacitorPluginAdPiePlugin\n{\n  // addListener(eventName: 'bannerAdLoaded', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'bannerAdFailedToLoad', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'bannerAdClicked', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onRewardedVideoLoaded', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onRewardedVideoFailedToLoad', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onRewardedVideoClicked', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onRewardedVideoStarted', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onRewardedVideoFinished', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onInterstitialLoaded', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onInterstitialFailedToLoad', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onInterstitialClicked', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onInterstitialShown', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  // addListener(eventName: 'onInterstitialDismissed', listenerFunc: () => void): Promise<PluginListenerHandle>;\n\n \n\n  // addListener(eventName: string, listenerFunc: void): Promise<PluginListenerHandle> {\n  //   // Your implementation here\n  //   // You can switch on eventName to handle different events if needed\n  //   console.log(`Event ${eventName} added.`);\n  //   return Promise.resolve(new PluginListenerHandle());\n  // }\n  \n\n  isLoadedInterstitial(): Promise<{ isLoadedInterstitial: boolean; }> {\n    console.log('isLoadedInterstitial');\n    throw new Error('Method not implemented.');\n  }\n  isLoadedRewardVideoAd(): Promise<{ isLoadedRewardVideoAd: boolean; }> {\n    console.log('isLoadedRewardVideoAd');\n    throw new Error('Method not implemented.');\n  }\n\n\n  async  initialize(options: { appId: string; }): Promise<void> {\n    console.log('initialize');\n\n  }\n  async showBanner(options: { adBannerId: string; position: string; margin: number; }): Promise<void> {\n    console.log('showBanner');\n\n  }\n  async  hideBanner(): Promise<void> {\n    console.log('hideBanner');\n\n  }\n  async removeBanner(): Promise<void> {\n    console.log('removeBanner');\n\n  }\n\n\n  async prepareRewardVideoAd(options: { adRewardId: string; }): Promise<void> {\n    console.log('prepareRewardVideoAd');\n  }\n  async showRewardVideoAd(): Promise<void> {\n    console.log('showRewardVideoAd');\n  }\n  // async  isLoadedRewardVideoAd(): Promise<{ isLoadedRewardVideoAd: boolean; }> {\n  //   console.log('isLoadedRewardVideoAd');\n  // }\n  async  prepareInterstitial(options: { adInterstitialId: string; }): Promise<void> {\n    console.log('prepareInterstitial');\n  }\n  async  showInterstitial(): Promise<void> {\n    console.log('showInterstitial');\n  }\n  // async isLoadedInterstitial(): Promise<{ isLoadedInterstitial: boolean; }> {\n  //   console.log('isLoadedInterstitial');\n  //       // Assuming you have some logic to check if the interstitial is loaded\n  //       const isLoaded = true;\n\n  //       return { isLoadedInterstitial: isLoaded };\n    \n  // }\n  async call_AdPie_bannerAd(options: {AdPieSDK_MediaId: string, slotID: string}): Promise<void> {\n    console.log('AdPieSDK_MediaId', options.AdPieSDK_MediaId);\n    console.log('slotID', options.slotID);\n  }\n  async call_AdPie_nativeAd(options: {AdPieSDK_MediaId: string, slotID: string}): Promise<void> {\n    console.log('AdPieSDK_MediaId', options.AdPieSDK_MediaId);\n    console.log('slotID', options.slotID);\n  }\n  async call_AdPie_interstitialAd(options: {AdPieSDK_MediaId: string, slotID: string}): Promise<void> {\n    console.log('AdPieSDK_MediaId', options.AdPieSDK_MediaId);\n    console.log('slotID', options.slotID);\n  }\n  async call_AdPie_rewardedAd(options: {AdPieSDK_MediaId: string, slotID: string}): Promise<void> {\n    console.log('AdPieSDK_MediaId', options.AdPieSDK_MediaId);\n    console.log('slotID', options.slotID);\n  }\n \n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n"]}